<?php

/**
 * Copyright 2015-2022 Fabian Grutschus. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those
 * of the authors and should not be interpreted as representing official policies,
 * either expressed or implied, of the copyright holders.
 */

declare(strict_types=1);

namespace Fabiang\DoctrineDynamic;

use Doctrine\ORM\Configuration as DoctrineConfiguration;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\Driver\AnnotationDriver;
use Doctrine\Persistence\Mapping\Driver\MappingDriverChain;
use Fabiang\DoctrineDynamic\Exception\InvalidArgumentException;
use Fabiang\DoctrineDynamic\Exception\RuntimeException;
use PHPUnit\Framework\TestCase;
use Prophecy\Argument;
use Prophecy\PhpUnit\ProphecyTrait;
use stdClass;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-10-05 at 16:45:31.
 *
 * @coversDefaultClass Fabiang\DoctrineDynamic\ProxyDriverFactory
 */
final class ProxyDriverFactoryTest extends TestCase
{
    use ProphecyTrait;

    /** @var ProxyDriverFactory */
    private $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new ProxyDriverFactory();
    }

    /**
     * @uses Fabiang\DoctrineDynamic\ProxyDriver::__construct
     * @uses Fabiang\DoctrineDynamic\ProxyDriver::getOriginalDriver
     *
     * @covers ::factory
     * @covers ::__construct
     */
    public function testFactory(): void
    {
        $driver1 = $this->prophesize(AnnotationDriver::class)->reveal();

        $mappingDriverChain = $this->prophesize(MappingDriverChain::class);
        $mappingDriverChain->getDrivers()->willReturn([
            'MyNamespace' => $driver1,
        ]);

        $mappingDriverChain->addDriver(
            Argument::that(function ($driver) use ($driver1) {
                    return $driver->getOriginalDriver() === $driver1;
            }),
            'MyNamespace'
        )
            ->shouldBeCalled();

        $doctrineConfiguration = $this->prophesize(DoctrineConfiguration::class);
        $doctrineConfiguration->getMetadataDriverImpl()
            ->willReturn($mappingDriverChain->reveal());

        $entityManager = $this->prophesize(EntityManager::class);
        $entityManager->getConfiguration()
            ->willReturn($doctrineConfiguration->reveal());

        $configuration = $this->prophesize(Configuration::class);

        $proxyDrivers = $this->object->factory(
            $entityManager->reveal(),
            $configuration->reveal()
        );
        $this->assertIsArray($proxyDrivers);
        $this->assertArrayHasKey('MyNamespace', $proxyDrivers);
        $this->assertInstanceOf(
            ProxyDriver::class,
            $proxyDrivers['MyNamespace']
        );
        $this->assertSame(
            $driver1,
            $proxyDrivers['MyNamespace']->getOriginalDriver()
        );
    }

    /**
     * @uses Fabiang\DoctrineDynamic\ProxyDriverFactory::__construct
     * @uses Fabiang\DoctrineDynamic\ProxyDriver::__construct
     * @uses Fabiang\DoctrineDynamic\ProxyDriver::getOriginalDriver
     * @uses Fabiang\DoctrineDynamic\ConfigurationFactory::factory
     *
     * @covers ::factory
     */
    public function testFactoryWithConfigArray(): void
    {
        $driver1 = $this->prophesize(AnnotationDriver::class)->reveal();

        $mappingDriverChain = $this->prophesize(MappingDriverChain::class);
        $mappingDriverChain->getDrivers()->willReturn([
            'MyNamespace' => $driver1,
        ]);

        $mappingDriverChain->addDriver(
            Argument::that(function ($driver) use ($driver1) {
                    return $driver->getOriginalDriver() === $driver1;
            }),
            'MyNamespace'
        )
            ->shouldBeCalled();

        $doctrineConfiguration = $this->prophesize(DoctrineConfiguration::class);
        $doctrineConfiguration->getMetadataDriverImpl()
            ->willReturn($mappingDriverChain->reveal());

        $entityManager = $this->prophesize(EntityManager::class);
        $entityManager->getConfiguration()
            ->willReturn($doctrineConfiguration->reveal());

        $configuration = [];

        $proxyDrivers = $this->object->factory(
            $entityManager->reveal(),
            $configuration
        );
        $this->assertIsArray($proxyDrivers);
        $this->assertArrayHasKey('MyNamespace', $proxyDrivers);
        $this->assertInstanceOf(
            ProxyDriver::class,
            $proxyDrivers['MyNamespace']
        );
        $this->assertSame(
            $driver1,
            $proxyDrivers['MyNamespace']->getOriginalDriver()
        );
    }

    /**
     * @uses Fabiang\DoctrineDynamic\ProxyDriverFactory::__construct
     *
     * @covers ::factory
     */
    public function testFactoryConfigNotTraversableOrConfigObject(): void
    {
        $this->expectException(InvalidArgumentException::class);

        $entityManager = $this->prophesize(EntityManager::class);
        $configuration = [];

        $proxyDrivers = $this->object->factory(
            $entityManager->reveal(),
            new stdClass()
        );
    }

    /**
     * @uses Fabiang\DoctrineDynamic\ProxyDriverFactory::__construct
     *
     * @covers ::factory
     */
    public function testFactoryMetadataDriverImplIsNotExpectedType(): void
    {
        $this->expectException(RuntimeException::class);

        $doctrineConfiguration = $this->prophesize(DoctrineConfiguration::class);
        $doctrineConfiguration->getMetadataDriverImpl()
            ->willReturn(new stdClass());

        $entityManager = $this->prophesize(EntityManager::class);
        $entityManager->getConfiguration()
            ->willReturn($doctrineConfiguration->reveal());

        $configuration = $this->prophesize(Configuration::class);

        $proxyDrivers = $this->object->factory(
            $entityManager->reveal(),
            $configuration->reveal()
        );
    }
}

<?php

namespace Fabiang\DoctrineDynamic;

use PHPUnit\Framework\TestCase;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Configuration as DoctrineConfiguration;
use Doctrine\Persistence\Mapping\Driver\MappingDriverChain;
use Doctrine\ORM\Mapping\Driver\AnnotationDriver;
use Prophecy\Argument;
use Prophecy\PhpUnit\ProphecyTrait;
use Fabiang\DoctrineDynamic\Exception\InvalidArgumentException;
use Fabiang\DoctrineDynamic\Exception\RuntimeException;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-10-05 at 16:45:31.
 *
 * @coversDefaultClass Fabiang\DoctrineDynamic\ProxyDriverFactory
 */
final class ProxyDriverFactoryTest extends TestCase
{

    use ProphecyTrait;

    /**
     * @var ProxyDriverFactory
     */
    private $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new ProxyDriverFactory;
    }

    /**
     * @covers ::factory
     * @covers ::__construct
     * @uses Fabiang\DoctrineDynamic\ProxyDriver::__construct
     * @uses Fabiang\DoctrineDynamic\ProxyDriver::getOriginalDriver
     */
    public function testFactory()
    {
        $driver1 = $this->prophesize(AnnotationDriver::class)->reveal();

        $mappingDriverChain = $this->prophesize(MappingDriverChain::class);
        $mappingDriverChain->getDrivers()->willReturn([
            'MyNamespace' => $driver1,
        ]);

        $mappingDriverChain->addDriver(
                Argument::that(function($driver) use($driver1) {
                    return $driver->getOriginalDriver() === $driver1;
                }),
                'MyNamespace'
            )
            ->shouldBeCalled();

        $doctrineConfiguration = $this->prophesize(DoctrineConfiguration::class);
        $doctrineConfiguration->getMetadataDriverImpl()
            ->willReturn($mappingDriverChain->reveal());

        $entityManager = $this->prophesize(EntityManager::class);
        $entityManager->getConfiguration()
            ->willReturn($doctrineConfiguration->reveal());

        $configuration = $this->prophesize(Configuration::class);

        $proxyDrivers = $this->object->factory(
            $entityManager->reveal(),
            $configuration->reveal()
        );
        $this->assertIsArray($proxyDrivers);
        $this->assertArrayHasKey('MyNamespace', $proxyDrivers);
        $this->assertInstanceOf(
            ProxyDriver::class,
            $proxyDrivers['MyNamespace']
        );
        $this->assertSame(
            $driver1,
            $proxyDrivers['MyNamespace']->getOriginalDriver()
        );
    }

    /**
     * @covers ::factory
     * @uses Fabiang\DoctrineDynamic\ProxyDriverFactory::__construct
     * @uses Fabiang\DoctrineDynamic\ProxyDriver::__construct
     * @uses Fabiang\DoctrineDynamic\ProxyDriver::getOriginalDriver
     * @uses Fabiang\DoctrineDynamic\ConfigurationFactory::factory
     */
    public function testFactoryWithConfigArray()
    {
        $driver1 = $this->prophesize(AnnotationDriver::class)->reveal();

        $mappingDriverChain = $this->prophesize(MappingDriverChain::class);
        $mappingDriverChain->getDrivers()->willReturn([
            'MyNamespace' => $driver1,
        ]);

        $mappingDriverChain->addDriver(
                Argument::that(function($driver) use($driver1) {
                    return $driver->getOriginalDriver() === $driver1;
                }),
                'MyNamespace'
            )
            ->shouldBeCalled();

        $doctrineConfiguration = $this->prophesize(DoctrineConfiguration::class);
        $doctrineConfiguration->getMetadataDriverImpl()
            ->willReturn($mappingDriverChain->reveal());

        $entityManager = $this->prophesize(EntityManager::class);
        $entityManager->getConfiguration()
            ->willReturn($doctrineConfiguration->reveal());

        $configuration = [];

        $proxyDrivers = $this->object->factory(
            $entityManager->reveal(),
            $configuration
        );
        $this->assertIsArray($proxyDrivers);
        $this->assertArrayHasKey('MyNamespace', $proxyDrivers);
        $this->assertInstanceOf(
            ProxyDriver::class,
            $proxyDrivers['MyNamespace']
        );
        $this->assertSame(
            $driver1,
            $proxyDrivers['MyNamespace']->getOriginalDriver()
        );
    }

    /**
     * @covers ::factory
     * @uses Fabiang\DoctrineDynamic\ProxyDriverFactory::__construct
     */
    public function testFactoryConfigNotTraversableOrConfigObject()
    {
        $this->expectException(InvalidArgumentException::class);

        $entityManager = $this->prophesize(EntityManager::class);
        $configuration = [];

        $proxyDrivers = $this->object->factory(
            $entityManager->reveal(),
            new \stdClass()
        );
    }

    /**
     * @covers ::factory
     * @uses Fabiang\DoctrineDynamic\ProxyDriverFactory::__construct
     */
    public function testFactoryMetadataDriverImplIsNotExpectedType()
    {
        $this->expectException(RuntimeException::class);

        $doctrineConfiguration = $this->prophesize(DoctrineConfiguration::class);
        $doctrineConfiguration->getMetadataDriverImpl()
            ->willReturn(new \stdClass());

        $entityManager = $this->prophesize(EntityManager::class);
        $entityManager->getConfiguration()
            ->willReturn($doctrineConfiguration->reveal());

        $configuration = $this->prophesize(Configuration::class);

        $proxyDrivers = $this->object->factory(
            $entityManager->reveal(),
            $configuration->reveal()
        );
    }

}

<?php

/**
 * Copyright 2015-2022 Fabian Grutschus. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those
 * of the authors and should not be interpreted as representing official policies,
 * either expressed or implied, of the copyright holders.
 */

declare(strict_types=1);

namespace Fabiang\DoctrineDynamic\Mapper;

use Doctrine\ORM\Mapping\ClassMetadataInfo;
use Fabiang\DoctrineDynamic\Behat\NamespaceOne\Entity\TestEntity as TestEntityOne;
use Fabiang\DoctrineDynamic\Behat\NamespaceTwo\Entity\TestEntity as TestEntityTwo;
use Fabiang\DoctrineDynamic\ConfigurationFactory;
use PHPUnit\Framework\TestCase;
use Prophecy\PhpUnit\ProphecyTrait;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-10-05 at 16:21:50.
 *
 * @coversDefaultClass Fabiang\DoctrineDynamic\Mapper\MetadataMapper
 */
final class MetadataMapperTest extends TestCase
{
    use ProphecyTrait;

    private MetadataMapper $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new MetadataMapper();
    }

    /**
     * @dataProvider provideConfig
     * @covers ::map
     * @covers ::mapRelation
     * @covers Fabiang\DoctrineDynamic\ConfigurationFactory
     * @covers Fabiang\DoctrineDynamic\Configuration
     * @covers Fabiang\DoctrineDynamic\Configuration\Entity
     * @covers Fabiang\DoctrineDynamic\Configuration\Field
     * @covers Fabiang\DoctrineDynamic\Configuration\Mapping\JoinColumn
     * @covers Fabiang\DoctrineDynamic\Configuration\Mapping\JoinTable
     * @covers Fabiang\DoctrineDynamic\Configuration\Mapping\ManyToMany
     * @covers Fabiang\DoctrineDynamic\Configuration\Mapping\ManyToOne
     * @covers Fabiang\DoctrineDynamic\Configuration\Mapping\OneToMany
     * @covers Fabiang\DoctrineDynamic\Configuration\Mapping\OneToOne
     */
    public function testMap(array $config): void
    {
        $metadata = $this->prophesize(ClassMetadataInfo::class);
        $metadata->mapOneToOne([
            'fieldName'    => 'oneToOneField',
            'targetEntity' => TestEntityTwo::class,
            'inversedBy'   => 'test',
            'mappedBy'     => null,
            'joinColumns'  => [
                [
                    'name'                 => 'test_id',
                    'referencedColumnName' => 'id',
                ],
            ],
        ])->shouldBeCalled();

        $metadata->mapManyToOne([
            'fieldName'    => 'manyToOneField',
            'targetEntity' => TestEntityOne::class,
            'inversedBy'   => 'test2',
            'joinColumns'  => [
                [
                    'name'                 => 'test2_id',
                    'referencedColumnName' => 'id',
                ],
            ],
        ])->shouldBeCalled();

        $metadata->mapOneToMany([
            'fieldName'    => 'oneToManyField',
            'targetEntity' => TestEntityTwo::class,
            'mappedBy'     => 'test3',
        ])->shouldBeCalled();

        $metadata->mapManyToMany([
            'fieldName'    => 'manyToManyField',
            'targetEntity' => TestEntityTwo::class,
            'inversedBy'   => 'test4',
            'mappedBy'     => null,
            'joinTable'    => [
                'name' => 'ManyToManyTableName',
            ],
        ])->shouldBeCalled();

        $configurationFactory = new ConfigurationFactory();
        $configuration        = $configurationFactory->factory($config);

        $metadataInstance = $metadata->reveal();
        $this->object->map(
            $metadataInstance,
            $configuration->get('MyNamespace\\Entity\\TestEntity')
        );

        $this->assertSame(
            'MyNamespace\\Repository\\TestRepository',
            $metadataInstance->customRepositoryClassName
        );
    }

    public function provideConfig(): array
    {
        return [
            [
                'config' => [
                    'MyNamespace\\Entity\\TestEntity' => [
                        'options' => [
                            'repository' => 'MyNamespace\\Repository\\TestRepository',
                        ],
                        'fields'  => [
                            'oneToOneField'   => [
                                'oneToOne' => [
                                    [
                                        'targetEntity' => TestEntityTwo::class,
                                        'inversedBy'   => 'test',
                                        'joinColumns'  => [
                                            'name'                 => 'test_id',
                                            'referencedColumnName' => 'id',
                                        ],
                                    ],
                                ],
                            ],
                            'manyToOneField'  => [
                                'manyToOne' => [
                                    [
                                        'targetEntity' => TestEntityOne::class,
                                        'inversedBy'   => 'test2',
                                        'joinColumns'  => [
                                            'name'                 => 'test2_id',
                                            'referencedColumnName' => 'id',
                                        ],
                                    ],
                                ],
                            ],
                            'oneToManyField'  => [
                                'oneToMany' => [
                                    [
                                        'targetEntity' => TestEntityTwo::class,
                                        'mappedBy'     => 'test3',
                                    ],
                                ],
                            ],
                            'manyToManyField' => [
                                'manyToMany' => [
                                    [
                                        'targetEntity' => TestEntityTwo::class,
                                        'inversedBy'   => 'test4',
                                        'joinTable'    => [
                                            'name' => 'ManyToManyTableName',
                                        ],
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
        ];
    }
}
